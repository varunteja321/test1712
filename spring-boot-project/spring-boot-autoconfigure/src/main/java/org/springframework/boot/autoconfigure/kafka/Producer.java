/*
 * Copyright 2012-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.boot.autoconfigure.kafka;

import java.util.Map;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;

import org.springframework.boot.context.properties.PropertyMapper;
import org.springframework.util.unit.DataSize;

/**
 * Spring Kafka configuration properties for Kafka producer client.
 * <p>
 * Users should refer to Kafka documentation for complete descriptions of these properties.
 *
 * @author Chris Bono
 */
public class Producer extends KafkaPropertiesBaseWithBootstrapServers {

	/**
	 * Number of acknowledgments the producer requires the leader to have received before
	 * considering a request complete.
	 */
	private String acks;

	/**
	 * Default batch size. A small batch size will make batching less common and may
	 * reduce throughput (a batch size of zero disables batching entirely).
	 */
	private DataSize batchSize;

	/**
	 * Total memory size the producer can use to buffer records waiting to be sent to the
	 * server.
	 */
	private DataSize bufferMemory;

	/**
	 * Compression type for all data generated by the producer.
	 */
	private String compressionType;

	/**
	 * Serializer class for keys.
	 */
	private Class<?> keySerializer = StringSerializer.class;

	/**
	 * Serializer class for values.
	 */
	private Class<?> valueSerializer = StringSerializer.class;

	/**
	 * When greater than zero, enables retrying of failed sends.
	 */
	private Integer retries;

	/**
	 * When non empty, enables transaction support for producer.
	 */
	private String transactionIdPrefix;

	public String getAcks() {
		return this.acks;
	}

	public void setAcks(String acks) {
		this.acks = acks;
	}

	public DataSize getBatchSize() {
		return this.batchSize;
	}

	public void setBatchSize(DataSize batchSize) {
		this.batchSize = batchSize;
	}

	public DataSize getBufferMemory() {
		return this.bufferMemory;
	}

	public void setBufferMemory(DataSize bufferMemory) {
		this.bufferMemory = bufferMemory;
	}

	public String getCompressionType() {
		return this.compressionType;
	}

	public void setCompressionType(String compressionType) {
		this.compressionType = compressionType;
	}

	public Class<?> getKeySerializer() {
		return this.keySerializer;
	}

	public void setKeySerializer(Class<?> keySerializer) {
		this.keySerializer = keySerializer;
	}

	public Class<?> getValueSerializer() {
		return this.valueSerializer;
	}

	public void setValueSerializer(Class<?> valueSerializer) {
		this.valueSerializer = valueSerializer;
	}

	public Integer getRetries() {
		return this.retries;
	}

	public void setRetries(Integer retries) {
		this.retries = retries;
	}

	public String getTransactionIdPrefix() {
		return this.transactionIdPrefix;
	}

	public void setTransactionIdPrefix(String transactionIdPrefix) {
		this.transactionIdPrefix = transactionIdPrefix;
	}

	public Map<String, Object> buildProperties() {

		// spring.kafka.producer.<common-props>
		Map<String, Object> properties = super.buildProperties();

		// spring.kafka.producer.<specific-props>
		PropertiesMap props = new PropertiesMap();
		PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
		map.from(this::getAcks).to(props.in(ProducerConfig.ACKS_CONFIG));
		map.from(this::getBatchSize).asInt(DataSize::toBytes).to(props.in(ProducerConfig.BATCH_SIZE_CONFIG));
		map.from(this::getBufferMemory).as(DataSize::toBytes).to(props.in(ProducerConfig.BUFFER_MEMORY_CONFIG));
		map.from(this::getCompressionType).to(props.in(ProducerConfig.COMPRESSION_TYPE_CONFIG));
		map.from(this::getKeySerializer).to(props.in(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG));
		map.from(this::getRetries).to(props.in(ProducerConfig.RETRIES_CONFIG));
		map.from(this::getValueSerializer).to(props.in(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG));
		properties.putAll(props);

		return properties;
	}

}
